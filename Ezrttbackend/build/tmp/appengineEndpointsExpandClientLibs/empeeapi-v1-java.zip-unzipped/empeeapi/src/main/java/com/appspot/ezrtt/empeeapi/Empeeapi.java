/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2016-02-18 22:11:37 UTC)
 * on 2016-02-26 at 12:53:26 UTC 
 * Modify at your own risk.
 */

package com.appspot.ezrtt.empeeapi;

/**
 * Service definition for Empeeapi (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link EmpeeapiRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Empeeapi extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.21.0 of the empeeapi library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://ezrtt.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "empeeapi/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Empeeapi(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Empeeapi(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "getloc".
   *
   * This request holds the parameters needed by the empeeapi server.  After setting any optional
   * parameters, call the {@link Getloc#execute()} method to invoke the remote operation.
   *
   * @param employeenum
   * @param fromdate
   * @param todate
   * @return the request
   */
  public Getloc getloc(java.lang.String employeenum, java.lang.String fromdate, java.lang.String todate) throws java.io.IOException {
    Getloc result = new Getloc(employeenum, fromdate, todate);
    initialize(result);
    return result;
  }

  public class Getloc extends EmpeeapiRequest<com.appspot.ezrtt.empeeapi.model.EmpWeekInfoCollection> {

    private static final String REST_PATH = "empweekinfocollection/{employeenum}/{fromdate}/{todate}";

    /**
     * Create a request for the method "getloc".
     *
     * This request holds the parameters needed by the the empeeapi server.  After setting any
     * optional parameters, call the {@link Getloc#execute()} method to invoke the remote operation.
     * <p> {@link
     * Getloc#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param employeenum
     * @param fromdate
     * @param todate
     * @since 1.13
     */
    protected Getloc(java.lang.String employeenum, java.lang.String fromdate, java.lang.String todate) {
      super(Empeeapi.this, "GET", REST_PATH, null, com.appspot.ezrtt.empeeapi.model.EmpWeekInfoCollection.class);
      this.employeenum = com.google.api.client.util.Preconditions.checkNotNull(employeenum, "Required parameter employeenum must be specified.");
      this.fromdate = com.google.api.client.util.Preconditions.checkNotNull(fromdate, "Required parameter fromdate must be specified.");
      this.todate = com.google.api.client.util.Preconditions.checkNotNull(todate, "Required parameter todate must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public Getloc setAlt(java.lang.String alt) {
      return (Getloc) super.setAlt(alt);
    }

    @Override
    public Getloc setFields(java.lang.String fields) {
      return (Getloc) super.setFields(fields);
    }

    @Override
    public Getloc setKey(java.lang.String key) {
      return (Getloc) super.setKey(key);
    }

    @Override
    public Getloc setOauthToken(java.lang.String oauthToken) {
      return (Getloc) super.setOauthToken(oauthToken);
    }

    @Override
    public Getloc setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Getloc) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Getloc setQuotaUser(java.lang.String quotaUser) {
      return (Getloc) super.setQuotaUser(quotaUser);
    }

    @Override
    public Getloc setUserIp(java.lang.String userIp) {
      return (Getloc) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String employeenum;

    /**

     */
    public java.lang.String getEmployeenum() {
      return employeenum;
    }

    public Getloc setEmployeenum(java.lang.String employeenum) {
      this.employeenum = employeenum;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String fromdate;

    /**

     */
    public java.lang.String getFromdate() {
      return fromdate;
    }

    public Getloc setFromdate(java.lang.String fromdate) {
      this.fromdate = fromdate;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String todate;

    /**

     */
    public java.lang.String getTodate() {
      return todate;
    }

    public Getloc setTodate(java.lang.String todate) {
      this.todate = todate;
      return this;
    }

    @Override
    public Getloc set(String parameterName, Object value) {
      return (Getloc) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "testdate".
   *
   * This request holds the parameters needed by the empeeapi server.  After setting any optional
   * parameters, call the {@link Testdate#execute()} method to invoke the remote operation.
   *
   * @return the request
   */
  public Testdate testdate() throws java.io.IOException {
    Testdate result = new Testdate();
    initialize(result);
    return result;
  }

  public class Testdate extends EmpeeapiRequest<com.appspot.ezrtt.empeeapi.model.Status> {

    private static final String REST_PATH = "testdate";

    /**
     * Create a request for the method "testdate".
     *
     * This request holds the parameters needed by the the empeeapi server.  After setting any
     * optional parameters, call the {@link Testdate#execute()} method to invoke the remote operation.
     * <p> {@link
     * Testdate#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @since 1.13
     */
    protected Testdate() {
      super(Empeeapi.this, "POST", REST_PATH, null, com.appspot.ezrtt.empeeapi.model.Status.class);
    }

    @Override
    public Testdate setAlt(java.lang.String alt) {
      return (Testdate) super.setAlt(alt);
    }

    @Override
    public Testdate setFields(java.lang.String fields) {
      return (Testdate) super.setFields(fields);
    }

    @Override
    public Testdate setKey(java.lang.String key) {
      return (Testdate) super.setKey(key);
    }

    @Override
    public Testdate setOauthToken(java.lang.String oauthToken) {
      return (Testdate) super.setOauthToken(oauthToken);
    }

    @Override
    public Testdate setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Testdate) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Testdate setQuotaUser(java.lang.String quotaUser) {
      return (Testdate) super.setQuotaUser(quotaUser);
    }

    @Override
    public Testdate setUserIp(java.lang.String userIp) {
      return (Testdate) super.setUserIp(userIp);
    }

    @Override
    public Testdate set(String parameterName, Object value) {
      return (Testdate) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateloc".
   *
   * This request holds the parameters needed by the empeeapi server.  After setting any optional
   * parameters, call the {@link Updateloc#execute()} method to invoke the remote operation.
   *
   * @param content the {@link com.appspot.ezrtt.empeeapi.model.EmpLoc}
   * @return the request
   */
  public Updateloc updateloc(com.appspot.ezrtt.empeeapi.model.EmpLoc content) throws java.io.IOException {
    Updateloc result = new Updateloc(content);
    initialize(result);
    return result;
  }

  public class Updateloc extends EmpeeapiRequest<com.appspot.ezrtt.empeeapi.model.EmpLoc> {

    private static final String REST_PATH = "emploc";

    /**
     * Create a request for the method "updateloc".
     *
     * This request holds the parameters needed by the the empeeapi server.  After setting any
     * optional parameters, call the {@link Updateloc#execute()} method to invoke the remote
     * operation. <p> {@link
     * Updateloc#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link com.appspot.ezrtt.empeeapi.model.EmpLoc}
     * @since 1.13
     */
    protected Updateloc(com.appspot.ezrtt.empeeapi.model.EmpLoc content) {
      super(Empeeapi.this, "PUT", REST_PATH, content, com.appspot.ezrtt.empeeapi.model.EmpLoc.class);
    }

    @Override
    public Updateloc setAlt(java.lang.String alt) {
      return (Updateloc) super.setAlt(alt);
    }

    @Override
    public Updateloc setFields(java.lang.String fields) {
      return (Updateloc) super.setFields(fields);
    }

    @Override
    public Updateloc setKey(java.lang.String key) {
      return (Updateloc) super.setKey(key);
    }

    @Override
    public Updateloc setOauthToken(java.lang.String oauthToken) {
      return (Updateloc) super.setOauthToken(oauthToken);
    }

    @Override
    public Updateloc setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Updateloc) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Updateloc setQuotaUser(java.lang.String quotaUser) {
      return (Updateloc) super.setQuotaUser(quotaUser);
    }

    @Override
    public Updateloc setUserIp(java.lang.String userIp) {
      return (Updateloc) super.setUserIp(userIp);
    }

    @Override
    public Updateloc set(String parameterName, Object value) {
      return (Updateloc) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "verifyempee".
   *
   * This request holds the parameters needed by the empeeapi server.  After setting any optional
   * parameters, call the {@link Verifyempee#execute()} method to invoke the remote operation.
   *
   * @param emploeenum
   * @return the request
   */
  public Verifyempee verifyempee(java.lang.String emploeenum) throws java.io.IOException {
    Verifyempee result = new Verifyempee(emploeenum);
    initialize(result);
    return result;
  }

  public class Verifyempee extends EmpeeapiRequest<com.appspot.ezrtt.empeeapi.model.Employee> {

    private static final String REST_PATH = "verifyEmpee/{emploeenum}";

    /**
     * Create a request for the method "verifyempee".
     *
     * This request holds the parameters needed by the the empeeapi server.  After setting any
     * optional parameters, call the {@link Verifyempee#execute()} method to invoke the remote
     * operation. <p> {@link
     * Verifyempee#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param emploeenum
     * @since 1.13
     */
    protected Verifyempee(java.lang.String emploeenum) {
      super(Empeeapi.this, "POST", REST_PATH, null, com.appspot.ezrtt.empeeapi.model.Employee.class);
      this.emploeenum = com.google.api.client.util.Preconditions.checkNotNull(emploeenum, "Required parameter emploeenum must be specified.");
    }

    @Override
    public Verifyempee setAlt(java.lang.String alt) {
      return (Verifyempee) super.setAlt(alt);
    }

    @Override
    public Verifyempee setFields(java.lang.String fields) {
      return (Verifyempee) super.setFields(fields);
    }

    @Override
    public Verifyempee setKey(java.lang.String key) {
      return (Verifyempee) super.setKey(key);
    }

    @Override
    public Verifyempee setOauthToken(java.lang.String oauthToken) {
      return (Verifyempee) super.setOauthToken(oauthToken);
    }

    @Override
    public Verifyempee setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Verifyempee) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Verifyempee setQuotaUser(java.lang.String quotaUser) {
      return (Verifyempee) super.setQuotaUser(quotaUser);
    }

    @Override
    public Verifyempee setUserIp(java.lang.String userIp) {
      return (Verifyempee) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String emploeenum;

    /**

     */
    public java.lang.String getEmploeenum() {
      return emploeenum;
    }

    public Verifyempee setEmploeenum(java.lang.String emploeenum) {
      this.emploeenum = emploeenum;
      return this;
    }

    @Override
    public Verifyempee set(String parameterName, Object value) {
      return (Verifyempee) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Empeeapi}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Empeeapi}. */
    @Override
    public Empeeapi build() {
      return new Empeeapi(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link EmpeeapiRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setEmpeeapiRequestInitializer(
        EmpeeapiRequestInitializer empeeapiRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(empeeapiRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
